{"version":3,"file":"static/js/282.4d2eeff4.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","components/ContactForm.jsx","components/UpdateContact.jsx","components/Contact.jsx","redux/filter/filter-selectors.js","components/ContactList.jsx","components/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { Input, Stack, InputGroup, InputLeftAddon } from '@chakra-ui/react';\nimport { useToast } from '@chakra-ui/react';\nimport { AddContactBtn } from './Buttons';\nimport { useColorModeValue } from '@chakra-ui/react';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const toast = useToast();\n  const bgColor = useColorModeValue('white', 'whiteAlpha.200');\n  const Color = useColorModeValue('black', 'white');\n  const handleChange = ({ target: { name, value } }) => {\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isExist = contacts.find(\n      contacts => contacts.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isExist) {\n      toast({\n        description: `${name} is already in contacts`,\n        status: 'error',\n        position: 'top',\n      });\n      reset();\n      return;\n    }\n\n    const contact = { name, number };\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Stack as=\"form\" spacing={2} onSubmit={handleSubmit} mb={5}>\n      <InputGroup>\n        <InputLeftAddon\n          children=\"Name:\"\n          w=\"5.5rem\"\n          fontSize=\"1em\"\n          border={'1px solid #c3c3c3'}\n        />\n        <Input\n          border={'1px solid #c3c3c3'}\n          bg={bgColor}\n          color={Color}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          w=\"17rem\"\n          onChange={handleChange}\n        />\n      </InputGroup>\n\n      <InputGroup>\n        <InputLeftAddon\n          children=\"Number:\"\n          w=\"5.5rem\"\n          fontSize=\"1em\"\n          border={'1px solid #c3c3c3'}\n        />\n        <Input\n          bg={bgColor}\n          color={Color}\n          border={'1px solid #c3c3c3'}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Phone Number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          w=\"17rem\"\n          onChange={handleChange}\n        />\n      </InputGroup>\n\n      <AddContactBtn type=\"submit\" />\n    </Stack>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contacts-operations';\nimport { useState } from 'react';\nimport {\n  Box,\n  FormLabel,\n  Input,\n  Button,\n  Flex,\n  FormControl,\n  useToast,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { IoIosClose, IoIosCheckmarkCircleOutline } from 'react-icons/io';\nexport const UpdateForm = ({ closeForm, contactToUpdate }) => {\n  const [name, setName] = useState(contactToUpdate.name);\n  const [number, setNumber] = useState(contactToUpdate.number);\n  const toast = useToast();\n  const dispatch = useDispatch();\n  const bgColor = useColorModeValue('white', 'gray.700');\n  const Color = useColorModeValue('black', 'white');\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(\n      updateContact({\n        ...contactToUpdate,\n        name,\n        number,\n      })\n    );\n    closeForm();\n  };\n\n  return (\n    <Box\n      bg={bgColor}\n      maxWidth={300}\n      borderWidth={1}\n      borderRadius={5}\n      boxShadow={'lg'}\n      p={5}\n      mx=\"auto\"\n      mt={10}\n      position=\"fixed\"\n      top=\"30%\"\n      left=\"50%\"\n      transform=\"translate(-50%, -50%)\"\n      zIndex={1000}\n    >\n      <Flex\n        as={'form'}\n        onSubmit={handleSubmit}\n        flexDirection={'column'}\n        align={'center'}\n        justify={'center'}\n        bg={bgColor}\n      >\n        <FormControl mb={5}>\n          <FormLabel> Name</FormLabel>\n\n          <Input\n            bg={bgColor}\n            color={Color}\n            border={'1px solid #c3c3c3'}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            size=\"sm\"\n            onChange={handleChange}\n          />\n\n          <FormLabel> Number</FormLabel>\n\n          <Input\n            bg={bgColor}\n            color={Color}\n            border={'1px solid #c3c3c3'}\n            type=\"text\"\n            name=\"number\"\n            value={number}\n            size=\"sm\"\n            onChange={handleChange}\n          />\n        </FormControl>\n        <Button\n          type=\"submit\"\n          position=\"absolute\"\n          top=\"0\"\n          right=\"-3\"\n          bg=\"transparent\"\n          _hover={{\n            bg: ('transparent', 'transparent'),\n            color: 'red',\n          }}\n          onClick={closeForm}\n        >\n          <IoIosClose size=\"30px\" />\n        </Button>\n        <Button\n          size=\"sm\"\n          type=\"submit\"\n          bg=\"transparent\"\n          color=\"green\"\n          _hover={{\n            bg: ('transparent', 'transparent'),\n            color: '#1cb137',\n          }}\n          onClick={() =>\n            toast({\n              status: 'success',\n              position: 'bottom-right',\n              description: 'Your contact details has been updated',\n            })\n          }\n        >\n          <IoIosCheckmarkCircleOutline size=\"40px\" />\n        </Button>\n      </Flex>\n    </Box>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contacts-selectors';\nimport { Flex, Button, Text, useToast } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { UpdateForm } from 'components/UpdateContact';\nimport { BsPhone, BsTrash, BsFillPencilFill } from 'react-icons/bs';\n\nexport const Contact = ({ name, number, id }) => {\n  const contacts = useSelector(selectContacts);\n  const [contactToUpdate, setContactToUpdate] = useState(null);\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    toast({\n      status: 'success',\n      position: 'bottom-right',\n      description: 'Your contact has been successfully deleted',\n    });\n  };\n\n  const handleShowUpdateForm = () => {\n    setContactToUpdate(contacts.find(contact => contact.id === id));\n  };\n\n  const handleCloseForm = () => {\n    setContactToUpdate(null);\n  };\n\n  return (\n    <Flex align=\"center\" justify=\"space-between\" gap=\"10px\">\n      <BsPhone size={20} color=\"#007ad1\" />\n\n      <Text ml=\"1%\" mr=\"auto\" fontWeight=\"500\">\n        {name}\n      </Text>\n      <Text ml=\"auto\" mr=\"1%\" fontWeight=\"500\">\n        {number}\n      </Text>\n      <Button onClick={handleShowUpdateForm}>\n        <BsFillPencilFill size={20} color=\"#007ad1\" />\n      </Button>\n      <Button onClick={handleDelete}>\n        <BsTrash size={20} color=\"#a90000\" />\n      </Button>\n      {contactToUpdate && contactToUpdate.id === id && (\n        <UpdateForm\n          contactToUpdate={contactToUpdate}\n          closeForm={handleCloseForm}\n        />\n      )}\n    </Flex>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","export const selectFilter = state => state.filter.filter;\n","import { Contact } from 'components/Contact';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectIsLoading,\n} from 'redux/contacts/contacts-selectors';\nimport { selectFilter } from 'redux/filter/filter-selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport { List, Spinner } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filtredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter)\n  );\n\n  return (\n    <>\n      {isLoading && (\n        <Spinner\n          position={'absolute'}\n          top=\"50%\"\n          left=\"50%\"\n          transform=\"translate(-50%, -50%)\"\n          thickness=\"4px\"\n          speed=\"0.65s\"\n          emptyColor=\"gray.200\"\n          color=\"#005daf\"\n          size=\"lg\"\n        />\n      )}\n      <List\n        spacing={2}\n        display={'flex'}\n        flexDirection={'column'}\n        gap={'20px'}\n        mb={'100px'}\n      >\n        {filtredContacts.map(({ name, number, id }) => {\n          return <Contact key={id} id={id} name={name} number={number} />;\n        })}\n      </List>\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilterValue } from 'redux/filter/filterSlice';\nimport { Flex, Input, InputGroup, InputLeftAddon } from '@chakra-ui/react';\nimport { useColorModeValue } from '@chakra-ui/react';\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const bgColor = useColorModeValue('white', 'whiteAlpha.200');\n  const Color = useColorModeValue('black', 'white');\n  return (\n    <Flex>\n      <InputGroup>\n        <InputLeftAddon\n          children=\"Find contacts :\"\n          fontSize=\"1em\"\n          border={'1px solid #c3c3c3'}\n        />\n        <Input\n          bg={bgColor}\n          color={Color}\n          border={'1px solid #c3c3c3'}\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Enter name\"\n          onChange={e => dispatch(setFilterValue(e.target.value))}\n          mb={5}\n        />\n      </InputGroup>\n    </Flex>\n  );\n};\n","import { Flex, Heading } from '@chakra-ui/react';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { useColorModeValue } from '@chakra-ui/react';\n\nconst ContactsPage = () => {\n  const bgColor = useColorModeValue('transparent', 'transparent');\n  return (\n    <Flex\n      name=\"flex\"\n      direction=\"column\"\n      align=\"center\"\n      pt={10}\n      px={10}\n      bg={bgColor}\n    >\n      <Heading as={'h2'} fontSize={'xl'} display=\"flex\" mb={5}>\n        Add new contact:\n      </Heading>\n      <ContactForm />\n\n      <Heading as={'h2'} fontSize={'xl'} display=\"flex\" mb={5}>\n        Contacts\n      </Heading>\n      <Filter />\n      <ContactList />\n    </Flex>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","toast","useToast","bgColor","useColorModeValue","Color","handleChange","target","value","reset","as","spacing","onSubmit","event","preventDefault","isExist","find","toLowerCase","description","status","position","contact","addContact","mb","children","w","fontSize","border","I","bg","color","type","placeholder","pattern","title","required","onChange","UpdateForm","closeForm","contactToUpdate","maxWidth","borderWidth","borderRadius","boxShadow","p","mx","mt","top","left","transform","zIndex","e","updateContact","flexDirection","align","justify","size","right","_hover","onClick","Contact","id","setContactToUpdate","gap","ml","mr","fontWeight","deleteContact","selectFilter","filter","ContactList","useEffect","fetchContacts","filtredContacts","includes","thickness","speed","emptyColor","display","map","Filter","setFilterValue","direction","pt","px"],"sourceRoot":""}